{"version":3,"sources":["component/search/search.component.jsx","component/robot/robot.component.jsx","component/robot-list/robot-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Search","placeholder","searchHandler","className","type","onChange","Robot","robot","alt","name","src","id","username","email","RobotList","robots","map","App","state","search","fetch","then","response","json","users","setState","event","this","target","value","filteredRobot","filter","toLowerCase","includes","bind","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAEaA,G,YAAS,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cAClC,OAAO,uBACHC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,MCLLI,G,YAAQ,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEnB,OACI,sBAAKJ,UAAU,QAAf,UACI,qBAAKK,IAAKD,EAAME,KAAMC,IAAK,wBAAwBH,EAAMI,GAAG,kBAC5D,4BAAIJ,EAAMK,WACV,4BAAIL,EAAMM,aCJTC,EAAY,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACvB,OACI,qBAAKZ,UAAU,aAAf,SACKY,EAAOC,KAAI,SAAAT,GAAK,OAAI,cAAC,EAAD,CAAsBA,MAAOA,GAAjBA,EAAMI,UCmCpCM,E,kDAlCd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZC,OAAS,GACTJ,OAAS,IAJG,E,gEAQO,IAAD,OACnBK,MAAM,8CACAC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEV,OAAQS,S,oCAG/BE,GACbC,KAAKF,SAAS,CAACN,OAAQO,EAAME,OAAOC,U,+BAG3B,IAAD,EAEmBF,KAAKT,MAAxBH,EAFA,EAEAA,OAAQI,EAFR,EAEQA,OACVW,EAAgBf,EAAOgB,QAAO,SAAAxB,GAAK,OAAIA,EAAMK,SAASoB,cAAcC,SAASd,EAAOa,kBAE1F,OACC,sBAAK7B,UAAU,MAAf,UACC,cAAC,EAAD,CAAQF,YAAY,iBAAiBC,cAAeyB,KAAKzB,cAAcgC,KAAKP,QAC5E,cAAC,EAAD,CAAWZ,OAAQe,W,GA5BLK,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.17fa96f5.chunk.js","sourcesContent":["import \"./search.style.css\";\r\n\r\nexport const Search = ({ placeholder, searchHandler }) => {\r\n    return <input \r\n        className=\"search\"\r\n        type=\"search\" \r\n        placeholder={placeholder}\r\n        onChange={searchHandler} />\r\n};","import './robot.style.css';\r\n\r\nexport const Robot = ({robot}) => {\r\n\r\n    return (\r\n        <div className=\"robot\">\r\n            <img alt={robot.name} src={'https://robohash.org/'+robot.id+'?size=180x180'} />\r\n            <p>{robot.username}</p>\r\n            <p>{robot.email}</p>\r\n        </div>\r\n    );\r\n\r\n}","import './robot-list.style.css';\r\n\r\nimport { Robot } from '../robot/robot.component'\r\n\r\nexport const RobotList = ({robots}) => {    \r\n    return (\r\n        <div className=\"robot-list\">\r\n            {robots.map(robot => <Robot key={robot.id} robot={robot} />)}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport './App.css';\r\nimport { Search } from './component/search/search.component';\r\nimport { RobotList } from './component/robot-list/robot-list.component';\r\n\r\nclass App extends React.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tsearch : \"\",\r\n\t\t\trobots : []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n      \t.then(response => response.json())\r\n      \t.then(users => this.setState({ robots: users }));\r\n\t}\r\n\r\n\tsearchHandler(event) {\r\n\t\tthis.setState({search: event.target.value})\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tconst { robots, search } = this.state;\r\n\t\tconst filteredRobot = robots.filter(robot => robot.username.toLowerCase().includes(search.toLowerCase()))\r\n\r\n\t\treturn (\r\n\t\t\t<div className='App'>\r\n\t\t\t\t<Search placeholder=\"Search Robot !\" searchHandler={this.searchHandler.bind(this)} />\r\n\t\t\t\t<RobotList robots={filteredRobot}/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}